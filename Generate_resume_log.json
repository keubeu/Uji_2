import json import os from datetime import datetime

def load_json(filename): try: with open(filename, "r", encoding="utf-8") as f: return json.load(f) except Exception as e: return None

def summarize_log(log_name, content): if not isinstance(content, list): return None

if log_name == "character_log.json":
    return {
        "total": len(content)
    }
elif log_name == "status_log.json":
    wounded = [s for s in content if s.get("health", 100) < 100]
    return {
        "total": len(content),
        "wounded_count": len(wounded)
    }
elif log_name == "event_log.json":
    return {
        "total": len(content),
        "latest_event": content[-1].get("title") if content else None
    }
elif log_name == "timeline_log.json":
    timestamps = sorted(e.get("datetime") for e in content if e.get("datetime"))
    return {
        "earliest": timestamps[0] if timestamps else None,
        "latest": timestamps[-1] if timestamps else None,
        "events_count": len(content)
    }
elif log_name == "battle_log.json":
    return {
        "count": len(content),
        "last_battle": content[-1].get("id") if content else None
    }
elif log_name == "diplomacy_log.json":
    alliances = sum(1 for d in content if d.get("status") == "aliansi")
    conflicts = sum(1 for d in content if d.get("status") == "perang")
    return {
        "total": len(content),
        "alliances": alliances,
        "conflicts": conflicts
    }
elif log_name == "economy_log.json":
    factions = set(e.get("faction_id") for e in content if e.get("faction_id"))
    top_resource = max(content, key=lambda x: x.get("amount", 0)).get("resource") if content else None
    return {
        "tracked_factions": len(factions),
        "top_resource": top_resource
    }
elif log_name == "inventory_log.json":
    owners = set(i.get("owner_id") for i in content)
    return {
        "items_tracked": len(content),
        "owners": len(owners)
    }
elif log_name == "research_log.json":
    ongoing = sum(1 for r in content if r.get("status") == "berjalan")
    completed = sum(1 for r in content if r.get("status") == "selesai")
    return {
        "ongoing": ongoing,
        "completed": completed
    }
elif log_name == "tracking_log.json":
    return {
        "moving_subjects": len(content),
        "latest_location": content[-1].get("location") if content else None
    }
elif log_name == "map_log.json":
    return {
        "regions": len(content)
    }
elif log_name == "decision_log.json":
    return {
        "count": len(content)
    }
elif log_name == "faction_log.json":
    return {
        "total": len(content)
    }
elif log_name == "system_protokol.json":
    version = content.get("version") if isinstance(content, dict) else None
    return {
        "system_protocol_version": version,
        "status": "Aktif"
    }
return {
    "entry_count": len(content)
}

def generate_resume(): resume = { "resume_session": { "timestamp": datetime.utcnow().isoformat() + "Z", "summary": {}, "generated_by": "modular_resume_auto_scanner" } }

log_files = [f for f in os.listdir() if f.endswith(".json")]

for log_file in log_files:
    content = load_json(log_file)
    if content:
        summary = summarize_log(log_file, content)
        if summary:
            key_name = log_file.replace("_log.json", "").replace(".json", "")
            resume["resume_session"]["summary"][key_name] = summary

with open("resume_session.json", "w", encoding="utf-8") as f:
    json.dump(resume, f, indent=2, ensure_ascii=False)

print("âœ… Resume otomatis berhasil diperbarui: resume_session.json")

if name == "main": generate_resume()

